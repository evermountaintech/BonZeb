<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.5.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:gl="clr-namespace:Bonsai.Shaders;assembly=Bonsai.Shaders"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:wie="clr-namespace:Bonsai.Windows.Input;assembly=Bonsai.Windows.Input"
                 xmlns:bz="clr-namespace:BonZeb;assembly=BonZeb"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:dsp="clr-namespace:Bonsai.Dsp;assembly=Bonsai.Dsp"
                 xmlns:scr="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:UpdateFrame" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>EventArgs.Time</Selector>
      </Expression>
      <Expression xsi:type="PublishSubject">
        <Name>Time</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="IntProperty">
          <Value>0</Value>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:UpdateUniform">
          <gl:UniformName>switch_stim</gl:UniformName>
          <gl:ShaderName>virtual_paramecia</gl:ShaderName>
        </Combinator>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>VideoAcquisition</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:CameraCapture">
                <cv:Index>0</cv:Index>
                <cv:CaptureProperties />
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Grayscale" />
            </Expression>
            <Expression xsi:type="PublishSubject">
              <Name>Image</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>CalculateBackground</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="wie:KeyDown">
                <wie:Filter>Tab</wie:Filter>
                <wie:SuppressRepetitions>false</wie:SuppressRepetitions>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Image</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="bz:CalculateBackground">
                <bz:PixelSearch>Brightest</bz:PixelSearch>
                <bz:NoiseThreshold>0</bz:NoiseThreshold>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:SkipUntil" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Take">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="BehaviorSubject">
              <Name>Background</Name>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="3" Label="Source2" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>MultiAnimalTracking</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="SubscribeSubject">
              <Name>Image</Name>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Background</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:WithLatestFrom" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="dsp:AbsoluteDifference" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Threshold">
                <cv:ThresholdValue>70</cv:ThresholdValue>
                <cv:MaxValue>255</cv:MaxValue>
                <cv:ThresholdType>Binary</cv:ThresholdType>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:FindContours">
                <cv:Mode>External</cv:Mode>
                <cv:Method>ChainApproxNone</cv:Method>
                <cv:Offset>
                  <cv:X>0</cv:X>
                  <cv:Y>0</cv:Y>
                </cv:Offset>
                <cv:MinArea>40</cv:MinArea>
                <cv:MaxArea xsi:nil="true" />
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="SelectMany">
              <Name>TrackMultipleAnimals</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Item1</Selector>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Concat" />
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Centroid</Selector>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Item2</Selector>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:CombineLatest" />
                  </Expression>
                  <Expression xsi:type="CreateObservable">
                    <Name>CalculateTailPoints</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="bz:CalculateTailPoints">
                            <bz:DistTailBase>12</bz:DistTailBase>
                            <bz:HeadingDirection>-1</bz:HeadingDirection>
                            <bz:NumTailSegments>7</bz:NumTailSegments>
                            <bz:DistTailPoints>6</bz:DistTailPoints>
                            <bz:RangeTailPointAngles>150</bz:RangeTailPointAngles>
                            <bz:PixelSearchMethod>Brightest</bz:PixelSearchMethod>
                            <bz:OffsetX>0</bz:OffsetX>
                            <bz:OffsetY>0</bz:OffsetY>
                            <bz:TailPointCalculationMethod>PixelSearch</bz:TailPointCalculationMethod>
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Points</Selector>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                      </Nodes>
                      <Edges>
                        <Edge From="0" To="1" Label="Source1" />
                        <Edge From="1" To="2" Label="Source1" />
                        <Edge From="2" To="3" Label="Source1" />
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="scr:PythonTransform">
                    <scr:Script>import clr
clr.AddReference("OpenCV.Net")
clr.AddReference("System.Reactive.Core")
clr.AddReference("System.Reactive.Linq")
clr.AddReference("System.Reactive.PlatformServices")
from OpenCV.Net import Point2f
from System import IObservable, Array
from System.Reactive.Linq import Observable
from System.Reactive.Concurrency import TaskPoolScheduler

@returns(IObservable[Array[Point2f]])
def process(value):
  return Observable.SubscribeOn(value, TaskPoolScheduler.Default)</scr:Script>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Merge" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:ToList" />
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="0" To="4" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="2" To="3" Label="Source1" />
                  <Edge From="3" To="5" Label="Source2" />
                  <Edge From="4" To="5" Label="Source1" />
                  <Edge From="5" To="6" Label="Source1" />
                  <Edge From="6" To="7" Label="Source1" />
                  <Edge From="7" To="8" Label="Source1" />
                  <Edge From="8" To="9" Label="Source1" />
                  <Edge From="9" To="10" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Script>import csv
import os
csv_writer = None
csv_file = None
filename = None

def unload():
  global filename, csv_file, csv_writer
  if filename is not None:
    filename = None
  if csv_file is not None:
    csv_file.close()
    csv_file = None
  if csv_writer is not None:
    csv_writer = None

@returns(bool)
def process(value):
  global filename, csv_file, csv_writer
  if filename is None:
    filename = "tracking_results.csv"
    csv_file = open(filename, 'wb')
    csv_writer = csv.writer(csv_file, delimiter = ',')
  n_fish_list = []
  for tail_points in value.Item1:
    tail_points_list = []
    for tail_point in tail_points:
      tail_points_list.append(str(tail_point))
    n_fish_list.append(str(tail_points_list))
  csv_writer.writerow(n_fish_list)
  return True</scr:Script>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="SubscribeSubject">
              <Name>Time</Name>
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Script>import clr
clr.AddReference("OpenTK")
from OpenTK import Vector2, Vector4
from System import Array, Single, Random
from math import atan2, pi, cos, sin, sqrt, pow

generator = Random()
particles = []
n = 20
max_speed = 0.001
min_speed = 0.0005
max_position_increment = 80
min_position_increment = 40
max_turn_speed = 0.1
min_turn_speed = - 0.1
max_orientation_increment = 80
min_orientation_increment = 40
max_size = 3
min_size = 1

# Particle behavior definition class
class Particle:

    def __init__(self):

        self.x_lims = Vector2.Zero
        self.y_lims = Vector2.Zero
        self.size = None
        self.generator = None
        self.max_speed = None
        self.min_speed = None
        self.max_position_increment = None
        self.min_position_increment = None
        self.max_turn_speed = None
        self.min_turn_speed = None
        self.max_orientation_increment = None
        self.min_orientation_increment = None
        self.max_size = None
        self.min_size = None
        self.position = Vector2.Zero
        self.orientation = None
        self.speed = None
        self.change_orientation = None
        self.change_position = None
        self.increments = None
        self.turn_speed = None
        self.active = None
        self.spiral = None

    def activate(self, x_lims, y_lims, generator, max_speed, min_speed, max_position_increment, min_position_increment, max_turn_speed, min_turn_speed, max_orientation_increment, min_orientation_increment, max_size, min_size):

        self.x_lims = x_lims
        self.y_lims = y_lims
        self.generator = generator
        self.max_speed = max_speed
        self.min_speed = min_speed
        self.max_position_increment = max_position_increment
        self.min_position_increment = min_position_increment
        self.max_turn_speed = max_turn_speed
        self.min_turn_speed = min_turn_speed
        self.max_orientation_increment = max_orientation_increment
        self.min_orientation_increment = min_orientation_increment
        self.max_size = max_size
        self.min_size = min_size
        self.spiral = 0

        self.position = self.initialize_starting_position(self.x_lims, self.y_lims, self.generator)
        self.orientation = self.initialize_starting_orientation(self.generator)
        self.size = self.initialize_size(self.max_size, self.min_size, self.generator)
        self.speed = self.update_speed(self.max_speed, self.min_speed, self.generator)
        self.turn_speed = self.update_speed(self.max_turn_speed, self.min_turn_speed, self.generator)
        self.increments = self.update_increments(self.max_position_increment, self.min_position_increment, self.generator)

        self.change_orientation = False
        self.change_position = True
        self.active = True

    def initialize_starting_position(self, x_lims, y_lims, generator):

        return Vector2(((x_lims[1] + x_lims[0]) / 2.0) + ((generator.NextDouble() - 0.5) * (x_lims[1] - x_lims[0])), ((y_lims[1] + y_lims[0]) / 2.0) + ((generator.NextDouble() - 0.5) * (y_lims[1] - y_lims[0])))

    def initialize_starting_orientation(self, generator):

        return generator.NextDouble() * pi * 2.0

    def initialize_size(self, max_size, min_size, generator):

        return (generator.NextDouble() * (max_size - min_size)) + min_size

    def update_particle_behaviour(self):

        if self.active:

            self.position, self.orientation, self.increments, self.change_orientation, self.change_position, self.turn_speed, self.spiral = self.update_particle_position(self.position, self.increments, self.max_orientation_increment, self.min_orientation_increment, self.orientation, self.speed, self.x_lims, self.y_lims, self.change_orientation, self.change_position, self.turn_speed, self.max_turn_speed, self.min_turn_speed, self.generator, self.spiral)
            self.orientation, self.increments, self.change_position, self.change_orientation, self.speed, self.turn_speed = self.update_particle_orientation(self.orientation, self.increments, self.max_position_increment, self.min_position_increment, self.turn_speed, self.change_orientation, self.change_position, self.speed, self.max_speed, self.min_speed, self.generator, self.max_turn_speed, self.min_turn_speed)

    def update_speed(self, max_speed, min_speed, generator):

        return ((max_speed + min_speed) / 2.0) + ((generator.NextDouble() - 0.5) * (max_speed - min_speed))

    def update_increments(self, max_increments, min_increments, generator):

        return int(((self.generator.NextDouble() - 0.5) * (max_increments - min_increments)) + ((max_increments + min_increments) / 2.0))

    def update_particle_orientation(self, orientation, increments, max_position_increment, min_position_increment, turn_speed, change_orientation, change_position, speed, max_speed, min_speed, generator, max_turn_speed, min_turn_speed):

        if change_orientation:

            if increments &lt;= 0:

                if generator.NextDouble() &gt; 0.1:

                    change_position = True
                    change_orientation = False
                    speed = self.update_speed(max_speed, min_speed, generator)
                    increments = self.update_increments(max_position_increment, min_position_increment, generator)

                else:

                    if turn_speed &gt; 0:

                        turn_speed = self.update_speed(0, min_turn_speed, generator)

                    else:

                        turn_speed = self.update_speed(max_speed, 0, generator)

                    increments = self.update_increments(max_orientation_increment, min_orientation_increment, generator)

            else:

                orientation += turn_speed
                increments -= 1

        return orientation, increments, change_position, change_orientation, speed, turn_speed

    def update_behaviour_at_limit(self, orientation, position, x_lims, y_lims, max_turn_speed, min_turn_speed, speed, turn_speed, change_position, change_orientation, increments):

        normalized_orientation = orientation

        if orientation &lt; 0:

            normalized_orientation = normalized_orientation - ((int(normalized_orientation / (pi * 2.0)) - 1) * (pi * 2.0))

        else:

            normalized_orientation = normalized_orientation - (int(normalized_orientation / (pi * 2.0)) * (pi * 2.0))

        if position.X &lt;= x_lims[0]:

            if normalized_orientation &lt;= pi * 3.0 / 2.0 and normalized_orientation &gt;= pi:

                orientation += max_turn_speed

            elif normalized_orientation &gt;= pi / 2.0 and normalized_orientation &lt; pi:

                orientation += min_turn_speed

            else:

                change_position = False
                change_orientation = True
                increments = self.update_increments(max_orientation_increment * 2.0, min_orientation_increment * 2.0, generator)

                if normalized_orientation &gt; pi * 3.0 / 2.0 and normalized_orientation &lt; pi * 2.0:

                    turn_speed = self.update_speed(max_turn_speed, 0, generator)

                if normalized_orientation &lt; pi and normalized_orientation &gt; 0.0:

                    turn_speed = self.update_speed(0, min_turn_speed, generator)

                position += Vector2(cos(orientation) * speed, -sin(orientation) * speed)

        if position.X &gt;= x_lims[1]:

            if normalized_orientation &gt;= pi * 3.0 / 2.0 and normalized_orientation &lt;= pi * 2.0:

                orientation += min_turn_speed

            elif normalized_orientation &lt;= pi / 2.0 and normalized_orientation &gt; 0.0:

                orientation += max_turn_speed

            else:

                change_position = False
                change_orientation = True
                increments = self.update_increments(max_orientation_increment * 2.0, min_orientation_increment * 2.0, generator)

                if normalized_orientation &lt; pi * 3.0 / 2.0 and normalized_orientation &gt; pi:

                    turn_speed = self.update_speed(0, min_turn_speed, generator)

                if normalized_orientation &gt; pi / 2.0 and normalized_orientation &lt; pi:

                    turn_speed = self.update_speed(max_turn_speed, 0, generator)

                position += Vector2(cos(orientation) * speed, -sin(orientation) * speed)

        if position.Y &lt;= y_lims[0]:

            if normalized_orientation &lt;= pi and normalized_orientation &gt;= pi / 2.0:

                orientation += max_turn_speed

            elif normalized_orientation &gt;= 0.0 and normalized_orientation &lt; pi / 2.0:

                orientation += min_turn_speed

            else:

                change_position = False
                change_orientation = True
                increments = self.update_increments(max_orientation_increment * 2.0, min_orientation_increment * 2.0, generator)

                if normalized_orientation &lt; pi * 3.0 / 2.0 and normalized_orientation &gt; pi:

                    turn_speed = self.update_speed(max_turn_speed, 0, generator)


                if normalized_orientation &lt; pi * 2.0 and normalized_orientation &gt; pi * 3.0 / 2.0:

                    turn_speed = self.update_speed(0, min_turn_speed, generator)

                position += Vector2(cos(orientation) * speed, -sin(orientation) * speed)

        if position.Y &gt;= y_lims[1]:

            if normalized_orientation &lt;= pi * 3.0 / 2.0 and normalized_orientation &gt;= pi:

                orientation += min_turn_speed

            elif normalized_orientation &lt;= pi * 2.0 and normalized_orientation &gt; pi * 3.0 / 2.0:

                orientation += max_turn_speed

            else:

                change_position = False
                change_orientation = True
                increments = self.update_increments(max_orientation_increment * 2.0, min_orientation_increment * 2.0, generator)

                if normalized_orientation &lt; pi and normalized_orientation &gt; pi / 2.0:

                    turn_speed = self.update_speed(0, min_turn_speed, generator)

                if normalized_orientation &gt; 0.0 and normalized_orientation &lt; pi / 2.0:

                    turn_speed = self.update_speed(max_turn_speed, 0, generator)

                position += Vector2(cos(orientation) * speed, -sin(orientation) * speed)

        return orientation, position, change_position, change_orientation, increments, turn_speed

    def update_particle_position(self, position, increments, max_orientation_increment, min_orientation_increment, orientation, speed, x_lims, y_lims, change_orientation, change_position, turn_speed, max_turn_speed, min_turn_speed, generator, spiral):

        if change_position:

            if position.X &lt;= x_lims[0] or position.X &gt;= x_lims[1] or position.Y &lt;= y_lims[0] or position.Y &gt;= y_lims[1]:

                spiral = 0
                orientation, position, change_position, change_orientation, increments, turn_speed = self.update_behaviour_at_limit(orientation, position, x_lims, y_lims, max_turn_speed, min_turn_speed, speed, turn_speed, change_position, change_orientation, increments)

            elif increments &lt;= 0:

                change_orientation = True
                change_position = False
                spiral = 0
                turn_speed = self.update_speed(max_turn_speed, min_turn_speed, generator)
                increments = self.update_increments(max_orientation_increment, min_orientation_increment, generator)

            else:

                if int(spiral / 20.0) % 2.0 == 0:

                    orientation -= spiral % 20.0 * 0.001

                else:

                    orientation += spiral % 20.0 * 0.001

                position += Vector2(cos(orientation) * speed, -sin(orientation) * speed)
                spiral += 1
                increments -= 1

        return position, orientation, increments, change_orientation, change_position, turn_speed, spiral

def load():

    global particles, generator, max_speed, min_speed, max_position_increment, min_position_increment, max_turn_speed, min_turn_speed, max_orientation_increment, min_orientation_increment, max_size, min_size

    for i in range(n):

        particle = Particle()
        particle.activate(Vector2(-1, 1), Vector2(-1, 1), generator, max_speed, min_speed, max_position_increment, min_position_increment, max_turn_speed, min_turn_speed, max_orientation_increment, min_orientation_increment, max_size, min_size)
        particles.append(particle)

def unload():
    global particles
    particles = []

@returns(Array[Vector4])
def process(value):

    count = 0

    for i in range(len(particles)):

        if particles[i].active:

            count += 1

    particle_array = Array.CreateInstance(Vector4, count)

    count = 0

    for i in range(len(particles)):

        if particles[i].active:

            particle_array[count] = Vector4(particles[i].position.X, particles[i].position.Y, particles[i].size, particles[i].orientation)
            count += 1
            
        particles[i].update_particle_behaviour()

    return particle_array</scr:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:DrawArrays">
                <gl:ShaderName>virtual_paramecia</gl:ShaderName>
                <gl:DrawMode>Points</gl:DrawMode>
                <gl:Usage>DynamicDraw</gl:Usage>
                <gl:VertexAttributes>
                  <gl:VertexAttributeMapping>
                    <gl:Size>4</gl:Size>
                    <gl:Normalized>false</gl:Normalized>
                    <gl:Type>Float</gl:Type>
                  </gl:VertexAttributeMapping>
                </gl:VertexAttributes>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:WithLatestFrom" />
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Script>import csv
import os
csv_file = None
csv_writer = None
filename = None

def unload():
  global filename, csv_file, csv_writer
  if filename is not None:
    filename = None
  if csv_file is not None:
    csv_file.close()
    csv_file = None
  if csv_writer is not None:
    csv_writer = None

@returns(bool)
def process(value):
  global filename, csv_file, csv_writer
  if filename is None:
    filename = "multi-prey-data.csv"
    csv_file = open(filename, 'wb')
    csv_writer = csv.writer(csv_file, delimiter = ',')
  data = ["{0},{1},{2},{3}".format(data_point.X, data_point.Y, data_point.Z, data_point.W) for data_point in value.Item2]
  csv_writer.writerow(data)
  return True</scr:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>1</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:UpdateUniform">
                <gl:UniformName>switch_stim</gl:UniformName>
                <gl:ShaderName>virtual_paramecia</gl:ShaderName>
              </Combinator>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="2" Label="Source1" />
            <Edge From="0" To="14" Label="Source1" />
            <Edge From="1" To="2" Label="Source2" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="3" To="7" Label="Source2" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="11" To="12" Label="Source1" />
            <Edge From="12" To="13" Label="Source1" />
            <Edge From="13" To="14" Label="Source2" />
            <Edge From="14" To="15" Label="Source1" />
            <Edge From="16" To="17" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>Timer</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Background</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:SubscribeWhen" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="TimeSpanProperty">
                <Value>PT0S</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="DueTime" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Timer">
                <rx:DueTime>PT0S</rx:DueTime>
                <rx:Period>PT1M</rx:Period>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Skip">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Take">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="2" Label="Source1" />
            <Edge From="1" To="2" Label="Source2" />
            <Edge From="2" To="3" Label="Source2" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="WorkflowOutput" />
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="1" To="2" Label="Source1" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="7" To="8" Label="Source1" />
      <Edge From="8" To="9" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>